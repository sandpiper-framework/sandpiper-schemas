openapi: 3.0.1
info:
  title: Sandpiper Framework
  description: The Sandpiper Framework
  contact:
    name: The Sandpiper Authors
    email: piper@sandpiperframework.net
    url: "http://www.sandpiperframework.net"
  license:
    name: Artistic License 2.0
    url: "https://www.perlfoundation.org/artistic-license-20.html"
  version: 0.9.16

components:
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    v4_uuid:
      description: An RFC4122 v4 UUID
      type: string
      format: uuid
    v4_uuid_nullable:
      description: An RFC4122 V4 UUID that may also be null
      type: string
      format: uuid
      nullable: true
    payload:
      description: A payload for an encoded binary object
      type: string
      format: byte
      nullable: true
    sandpiper_message:
      description: A message to be passed between actors
      type: object
      required:
        - message_code
        - message_text
      properties:
        message_code:
          type: integer
          nullable: false
        message_text:
          type: string
          nullable: true
    sandpiper_login_object:
      description: A login & permission object used at the /login endpoint
      type: object
      required:
        - username
        - password
        - plandocument
      properties:
        username:
          type: string
          nullable: false
        password:
          type: string
          nullable: false
        plandocument:
          type: string
          format: byte
          nullable: true
    plan_status_action:
      type: string
      enum:
        - propose
        - approve
        - hold
        - terminate
        - obsolete
    plan_status:
      type: string
      description: >
        The status of the plan as it currently stands.
      enum:
        - Proposed
        - Approved
        - On Hold
        - Terminated
        - Obsolete
    plan:
      type: object
      required:
        - plan_uuid
        - plan_description
        - plan_status
        - plan_status_on
        - primary_approved_on
        - secondary_approved_on
        - payload
      properties:
        plan_uuid:
          $ref: "#/components/schemas/v4_uuid"
        replaces_plan_uuid:
          $ref: "#/components/schemas/v4_uuid_nullable"
        plan_description:
          type: string
        plan_status:
          $ref: "#/components/schemas/plan_status"
        plan_status_on:
          type: string
          format: date-time
        primary_approved_on:
          type: string
          format: date-time
          nullable: true
        secondary_approved_on:
          type: string
          format: date-time
          nullable: true
        payload:
          $ref: "#/components/schemas/payload"
    plans:
      type: array
      items:
        $ref: "#/components/schemas/plan"
    slice:
      type: object
      required:
        - slice_uuid
        - slice_description
        - slice_type
        - file_name
        - slice_meta_data
        - slice_order
        - slice_grainlist_hash
      properties:
        slice_uuid:
          $ref: "#/components/schemas/v4_uuid"
        slice_description:
          type: string
        slice_type:
          type: string
        file_name:
          type: string
          nullable: true
        slice_meta_data:
          description: reserved for future use
          type: string
          nullable: true
        slice_order:
          type: integer
        slice_grainlist_hash:
          description: reserved for future use
          type: string
          format: binary
          nullable: true
    grain:
      description: A single grain object
      type: object
      required:
        - grain_uuid
        - grain_order
        - grain_key
        - grain_reference
        - payload
      properties:
        grain_uuid:
          $ref: "#/components/schemas/v4_uuid"
        grain_order:
          description: Order of the grain within the slice from which it was accessed
          type: integer
        grain_key:
          description: A unique value that identifies a key, pivotal value within the grain's content, e.g. a part number
          type: string
        grain_reference:
          description: A value that may or may not be unique but provides an index to the grain that is not found in its contents, e.g. an internal system ID at the grain's genesis
          type: string
        grain_size_bytes:
          description: Size of the grain's data in bytes
          type: integer
        payload:
          $ref: "#/components/schemas/payload"
    grains:
      description: One or more grains
      type: array
      items:
        $ref: "#/components/schemas/grain"
    grain_msg:
      description: A single grain with a Sandpiper message
      type: object
      required:
        - grain
        - message
      properties:
        grain:
          $ref: "#/components/schemas/grain"
        message:
          $ref: "#/components/schemas/sandpiper_message"
    grains_msg:
      description: One or more grains with a Sandpiper message
      type: object
      required:
        - grains
        - message
      properties:
        grains:
          $ref: "#/components/schemas/grains"
        message:
          $ref: "#/components/schemas/sandpiper_message"
    grain_ids:
      description: One or more grain IDs
      type: array
      items:
        $ref: "#/components/schemas/v4_uuid"
    grain_ids_msg:
      description: One or more grain IDs with a sandpiper message
      type: object
      required:
        - grain_ids
        - message
      properties:
        grain_ids:
          $ref: "#/components/schemas/grain_ids"
        message:
          $ref: "#/components/schemas/sandpiper_message"
    plan_msg:
      description: A single plan with a Sandpiper message
      type: object
      required:
        - grain
        - message
      properties:
        plan:
          $ref: "#/components/schemas/plan"
        message:
          $ref: "#/components/schemas/sandpiper_message"
    plans_msg:
      description: One or more plans with a Sandpiper message
      type: object
      required:
        - grains
        - message
      properties:
        plans:
          $ref: "#/components/schemas/plans"
        message:
          $ref: "#/components/schemas/sandpiper_message"
    slice_msg:
      description: A single slice with a Sandpiper message
      type: object
      required:
        - slice
        - message
      properties:
        slice:
          $ref: "#/components/schemas/slice"
        message:
          $ref: "#/components/schemas/sandpiper_message"
  responses:
    message_response:
      description: A standalone Sandpiper message
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/sandpiper_message"
    plan_response:
      description: Data for a single plan
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/plan_msg"
    plans_response:
      description: A collection of plans
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/plans_msg"
    slice_response:
      description: Core data for a single slice
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/slice_msg"
    grain_response:
      description: Data for a single grain
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/grain_msg"
    grains_response:
      description: A collection of grains
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/grains_msg"
    grain_ids_response:
      description: A list of grain IDs
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/grain_ids_msg"
    not_authorized_response:
      description: Any content requested from a valid endpoint but that is not available, due to security or other factor, should return a 403 Forbidden error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/sandpiper_message"

servers:
  - url: "{server}/v1"
    variables:
      server:
        default: https://sandpiper.example.com
    description: Sandpiper V1 Server

security:
  - jwtAuth: []

paths:
  /login:
    description: Authentication login point as well as a "hello" echo
    get:
      security: []
      tags:
        - actions
      responses:
        200:
          description: OK
    post:
      security: []
      tags:
        - actions
      requestBody:
        content:
          application/json:
           schema:
             $ref: "#/components/schemas/sandpiper_login_object"
      responses:
        200:
          description: Successful login, returning JWT token and message
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  message:
                    $ref: "#/components/schemas/sandpiper_message"

  /plans:
    description: All plans available to the authenticated user
    get:
      tags:
        - object collections
      summary: >-
        Get the list of all plans stored on the respondent, optionally with
        their document contents as well.
      parameters:
        - in: query
          name: plan_detail
          description: Optionally controls the level of detail that will be returned for a plan
          schema:
            type: string
            enum:
              - PLAN_WITH_DOCUMENT
              - PLAN_WITHOUT_DOCUMENT
            default: PLAN_WITHOUT_DOCUMENT
      responses:
        200:
          $ref: "#/components/responses/plans_response"
        403:
          $ref: "#/components/responses/not_authorized_response"
  /plans/{plan_uuid}:
    description: A specific plan
    get:
      tags:
        - objects
      summary: Access a specific plan using its unique identifier
      parameters:
        - name: plan_uuid
          in: path
          description: A unique plan ID
          required: true
          schema:
            $ref: "#/components/schemas/v4_uuid"
      responses:
        200:
          $ref: "#/components/responses/plan_response"
        403:
          $ref: "#/components/responses/not_authorized_response"
  /plans/{generator_action}:
    description: >-
      Generate a fragment plan or upload a previously-unknown plan as a new
      proposal
    post:
      tags:
        - actions
      summary: Transfer a plan or plan fragment to the respondent
      description: >-
        A primary initiator can provide a fragment plan document to the
        secondary respondent with the "invoke" parameter. Primary or secondary
        initiators can also propose a wholly new plan with the "propose"
        parameter.
      parameters:
        - name: generator_action
          in: path
          description: >-
            Invoke a fragment plan to bootstrap a fully new plan, or Propose a
            previously-unshared complete plan to the other actor
          required: true
          schema:
            type: string
            enum:
              - invoke
              - propose
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/plan_msg"
      responses:
        200:
          $ref: "#/components/responses/message_response"
        403:
          $ref: "#/components/responses/not_authorized_response"
    get:
      tags:
        - actions
      summary: Download a plan fragment from the respondent
      description: >-
        A secondary initiator can download a fragment plan document from the
        primary respondent with the "invoke" parameter.
      parameters:
        - name: generator_action
          in: path
          description: >-
            Invoke a fragment plan to bootstrap a fully new plan, or Propose a
            previously-unshared complete plan to the other actor
          required: true
          schema:
            type: string
            enum:
              - invoke
      responses:
        200:
          $ref: "#/components/responses/plan_response"
        403:
          $ref: "#/components/responses/not_authorized_response"

  /plans/{plan_uuid}/{status_action}:
    description: Modify a given plan's status
    parameters:
      - name: plan_uuid
        in: path
        description: A unique plan ID
        required: true
        schema:
          $ref: "#/components/schemas/v4_uuid"
      - name: status_action
        in: path
        description: >-
          By posting to this endpoint, an actor can alter the current status of
          a specific plan. Note that there are rules in place to govern the
          direction these can move in; see the documentation for more details.
        required: true
        schema:
          $ref: "#/components/schemas/plan_status_action"
    post:
      tags:
        - actions
      summary: Alter the status of a specific plan.
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/sandpiper_message"
      responses:
        200:
          $ref: "#/components/responses/message_response"
        403:
          $ref: "#/components/responses/not_authorized_response"
  /slices/{slice_uuid}:
    description: A specific slice
    parameters:
      - name: slice_uuid
        in: path
        description: A unique slice ID
        required: true
        schema:
          $ref: "#/components/schemas/v4_uuid"
    get:
      tags:
        - objects
      summary: Get the metadata for a specific slice
      responses:
        200:
          $ref: "#/components/responses/slice_response"
        403:
          $ref: "#/components/responses/not_authorized_response"
  /slices/{slice_uuid}/grains:
    description: All grains within a specific slice
    parameters:
      - name: slice_uuid
        in: path
        description: A unique slice ID
        required: true
        schema:
          $ref: "#/components/schemas/v4_uuid"
      - name: grain_detail
        in: query
        description: Optionally controls the delivery of grain contents or just metadata
        schema:
          type: string
          enum:
            - GRAIN_WITH_PAYLOAD
            - GRAIN_WITHOUT_PAYLOAD
          default: GRAIN_WITHOUT_PAYLOAD
    get:
      tags:
        - object collections
      summary: Get all grains within a specific slice as full objects
      responses:
        200:
          $ref: "#/components/responses/grains_response"
        403:
          $ref: "#/components/responses/not_authorized_response"
  /slices/{slice_uuid}/grain_id_list:
    description: All grains within a specific slice, but in a highly optimized format. Useful when loading huge lists of grains at high frequency.
    parameters:
      - name: slice_uuid
        in: path
        description: A unique slice ID
        required: true
        schema:
          $ref: "#/components/schemas/v4_uuid"
    get:
      tags:
        - object collections
      summary: Get all grains within a specific slice as a one-dimensional list of IDs
      responses:
        200:
          $ref: "#/components/responses/grain_ids_response"
        403:
          $ref: "#/components/responses/not_authorized_response"
  /slices/{slice_uuid}/grains/{grain_uuid}:
    description: A specific grain within a specific slice
    parameters:
      - name: slice_uuid
        in: path
        description: A unique slice ID
        required: true
        schema:
          $ref: "#/components/schemas/v4_uuid"
      - name: grain_uuid
        in: path
        description: A unique grain UUID
        required: true
        schema:
          $ref: "#/components/schemas/v4_uuid"
    get:
      tags:
        - objects
      summary: Get the metadata and optionally the content of a specific grain
      parameters:
        - name: grain_detail
          in: query
          description: Optionally controls the delivery of grain contents or just metadata
          schema:
            type: string
            enum:
              - GRAIN_WITH_PAYLOAD
              - GRAIN_WITHOUT_PAYLOAD
            default: GRAIN_WITHOUT_PAYLOAD
      responses:
        200:
          $ref: "#/components/responses/grain_response"
        403:
          $ref: "#/components/responses/not_authorized_response"
    delete:
      tags:
        - actions
      summary: Remove a specific grain from a specific slice
      responses:
        200:
          $ref: "#/components/responses/message_response"
        403:
          $ref: "#/components/responses/not_authorized_response"
    post:
      tags:
        - actions
      summary: Link an existing grain to a specific slice, or provide a new grain
      description: Link an already-extant grain to the given slice, or create a new grain with this UUID in this slice if it has never been used before. If the grain UUID exists in any other slice, but the payload is present in this POST action, the server must respond with an error 409 -- once established, a grain's payload can never change without subsequently also having a new UUID, and it could overwhelm the server to constantly be checking contents against existing contents.
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/grain_msg"
      responses:
        200:  # Linked
          $ref: "#/components/responses/message_response"
        403:
          $ref: "#/components/responses/not_authorized_response"
        409:  # Grain already exists but payload was provided. Payloads cannot be updated once created
          $ref: "#/components/responses/message_response"
